node {
    parameters {
        string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    environment {
        PATH = "${PATH}:${getTerraformPath()}"

        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = '1'
    }


    def commit_id
    stage('Preparation') {
        checkout scm
        sh 'git rev-parse --short HEAD > .git/commit-id'
            commit_id = readFile('.git/commit-id').trim()
    }
    stage('Plan'){
        dir('/var/lib/jenkins/workspace/terraform/module/modules/production'){
            script {
                currentBuild.displayName = params.version
            }
            sh '/usr/local/bin/terraform init -input=false'
            sh '/usr/local/bin/terraform workspace select ${environment}'
            sh "/usr/local/bin/terraform plan -input=false -out tfplan"
            sh '/usr/local/bin/terraform show -no-color tfplan > tfplan.txt'
        }
    }

    stage('Approval') {
        when {
            not {
                equals expected: true, actual: params.autoApprove
            }
        }
        script {
            def plan = readFile 'tfplan.txt'
            input message: "Do you want to apply the plan?"
            parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
        }
    }

    stage ('Apply') {
        sh "/usr/local/bin/terraform apply -input=false tfplan"
    }
}

    post {
        always {
            archiveArtifacts artifacts: 'tfplan.txt'
        }
}

def getTerraformPath(){
    def tfHome = tool name: 'terraform-12', type: 'terraform'
    return tfHome
}
