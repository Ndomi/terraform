pipeline {
    agent any

    parameters {
        string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        string(name: 'version', defaultValue: 'v1', description: 'Version variable to pass to Terraform')
//         booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    environment {
        PATH = "${PATH}:${getTerraformPath()}"

/*         AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = '1' */
    }


    stages {
        checkout scm
        stage('S3 - Create bucket'){
            steps{
                dir('/var/lib/jenkins/workspace/terraform/module/modules/production'){
                    sh '/bin/ansible-playbook s3-bucket.yml'
                }
            }
        }
        stage('Compute preparation'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/Compute'){
                    script {
                        currentBuild.displayName = params.version
                    }
                    sh '/usr/local/bin/terraform init -input=false'
                }
            }
        }

        stage('Logging preparation'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/Logging'){
                    script {
                        currentBuild.displayName = params.version
                    }
                    sh '/usr/local/bin/terraform init -input=false'
                }
            }
        }

        stage('networking preparation'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/networking'){
                     script {
                        currentBuild.displayName = params.version
                    }
                    sh '/usr/local/bin/terraform init -input=false'
                }
            }
        }

        stage('Users preparation'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/Users'){
                     script {
                        currentBuild.displayName = params.version
                    }
                    sh '/usr/local/bin/terraform init -input=false'
                }
            }
        }

        stage('production preparation'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/production'){
                     script {
                        currentBuild.displayName = params.version
                    }
                    sh '/usr/local/bin/terraform init -input=false'
                }
            }
        }

        stage('Plan'){
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/production'){
                     script {
                        currentBuild.displayName = params.version
                    }
//                    sh '/usr/local/bin/terraform init -input=false'
                    sh '/usr/local/bin/terraform workspace select ${environment}'
                    sh "/usr/local/bin/terraform plan -input=false -out tfplan"
                    sh '/usr/local/bin/terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }
        stage('Approval') {
/*             when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?"
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            } */
            steps {
                input('Do you want to apply the plan ??')
            }
        }

        stage ('Apply') {
            steps {
                dir('/var/lib/jenkins/workspace/terraform/module/modules/production'){
                    sh "/usr/local/bin/terraform apply -input=false tfplan"
                }
            }
        }
    }
    post {
        fixed {
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(color: '#00FF00', message: "BACK TO GREEN: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }
        failure {
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }
    }
}

def getTerraformPath(){
    def tfHome = tool name: 'terraform-12', type: 'terraform'
    return tfHome
}
